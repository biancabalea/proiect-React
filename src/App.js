import React, { useState, useEffect } from 'react';
import Calendar from 'react-calendar';
import { FaCheck, FaTimes, FaClock } from 'react-icons/fa';
import './App.css';
import alarmSound from './sounds/alarma-diminetii.mp3';

const App = () => {
  const [date, setDate] = useState(new Date());
  const [showTable, setShowTable] = useState(false);
  const [taskTitle, setTaskTitle] = useState('');
  const [selectedEmoji, setSelectedEmoji] = useState('üòä');
  const [taskHour, setTaskHour] = useState(0);
  const [showSettings, setShowSettings] = useState(false);
  const [enableNotifications, setEnableNotifications] = useState(false);
  const [enableAlarm, setEnableAlarm] = useState(false);
  const [audio] = useState(new Audio(alarmSound));
  const [notificationHour, setNotificationHour] = useState(0);
  const [notificationMinute, setNotificationMinute] = useState(0);

  const tasksInitialState = {
    overdue: [],
    upcoming: [],
    completed: [],
    canceled: [],
  };
  const [tasks, setTasks] = useState(tasksInitialState);

  const emojis = [
   'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'üòÇ', 'ü§£', 'üòä', 'üòá',
   'üôÇ', 'üôÉ', 'üòâ', 'üòå', 'üòç', 'ü•∞', 'üòò', 'üòó', 'üòô', 
   'üòã', 'üòõ', 'üòú', 'üòù', 'ü§ë', 'ü§ó', 'ü§î', 'ü§ê', 'üòí',
   'üòì', 'üòî', 'üòï', 'üôÅ', 'üòñ', 'üòû', 'üòü', 'üò§', 'üò¢', 
   'üò¶', 'üòß', 'üò®', 'üò©', 'üò¨', 'üò∞', 'üò±', 'üò≥', 'üòµ', 
   'üò°', 'üò∑', 'ü§í', 'ü§ï', 'ü§¢', 'ü§Æ', 'ü§ß', 'üòá', 'ü§†', 
   'ü§•', 'ü§´', 'ü§≠', 'üßê', 'ü§ì', 'üòà', 'üëø', 'üëπ', 'üë∫',
   'üëª', 'üëΩ', 'üëæ', 'ü§ñ', 'üéÉ', 'üò∫', 'üò∏', 'üòπ', 'üòª', 
   'üòΩ', 'üôÄ', 'üòø', 'üòæ', 'üôà', 'üôâ', 'üôä', 'üí•', 'üí´',
   'üí®', 'üêµ', 'üêí', 'ü¶ç', 'üê∂', 'üêï', 'üê©', 'üê∫', 'ü¶ä', 
   'üê±', 'üêà', 'ü¶Å', 'üêØ', 'üêÖ', 'üêÜ', 'üê¥', 'üêé', 'ü¶Ñ',
   'ü¶å', 'üêÆ', 'üêÇ', 'üêÉ', 'üêÑ', 'üê∑', 'üêñ', 'üêó', 'üêΩ',
   'üêë', 'üêê', 'üê™', 'üê´', 'ü¶ô', 'ü¶í', 'üêò', 'ü¶è', 'ü¶õ',
   'üêÅ', 'üêÄ', 'üêπ', 'üê∞', 'üêá', 'üêøÔ∏è', 'ü¶î', 'ü¶á', 'üêª',
   'üêº', 'ü¶ò', 'ü¶°', 'üêæ', 'ü¶É', 'üêî', 'üêì', 'üê£', 'üê§',
   'üê¶', 'üêß', 'üïäÔ∏è', 'ü¶Ö', 'ü¶Ü', 'ü¶¢', 'ü¶â', 'ü¶ö', 'ü¶ú', 
   'üêä', 'üê¢', 'ü¶é', 'üêç', 'üê≤', 'üêâ', 'ü¶ï', 'ü¶ñ', 'üåµ',
   'üå≤', 'üå≥', 'üå¥', 'üå±', 'üåø', '‚òòÔ∏è', 'üçÄ', 'üéç', 'üéã',
   'üçÇ', 'üçÅ', 'üçÑ', 'üåæ', 'üíê', 'üå∑', 'üåπ', 'ü•Ä', 'üå∫',
   'üåº', 'üåª', 'üåû', 'üåù', 'üåõ', 'üåú', 'üåö', 'üåï', 'üåñ',
   'üåò', 'üåë', 'üåí', 'üåì', 'üåî', 'üåô', 'üåé', 'üåç', 'üåè',
   'üåå', 'üå†', '‚≠ê', 'üåü', 'üí´', '‚ú®', '‚òÑÔ∏è', '‚òÄÔ∏è', 'üå§Ô∏è', 
   'üå•Ô∏è', '‚òÅÔ∏è', 'üå¶Ô∏è', 'üåßÔ∏è', '‚õàÔ∏è', 'üå©Ô∏è', '‚ö°', 'üî•', 'üí•',
   '‚ùÑÔ∏è', 'üå®Ô∏è', '‚òÉÔ∏è', '‚õÑ', 'üå¨Ô∏è', 'üí®', 'üå™Ô∏è', 'üå´Ô∏è', 'üåà',
   '‚òî', 'üíß', 'üí¶', 'üåä', 'üçè', 'üçé', 'üçê', 'üçä', 'üçã',
   'üçâ', 'üçá', 'üçì', 'üçà', 'üçí', 'üçë', 'üçç', 'ü•≠', 'ü••',
   'üçÖ', 'üçÜ', 'ü•ë', 'ü•í', 'ü•¶', 'üå∂Ô∏è', 'üåΩ', 'ü•ï', 'ü•î',
   'üçá', 'üçà', 'üçâ', 'üçä', 'üçã', 'üçå', 'üçç', 'üçé', 'üçè',
   'üçë', 'üçí', 'üçì', 'ü•ù', 'ü•ë', 'üçÖ', 'üçÜ', 'ü•í', 'üåΩ',
   'ü•î', 'ü••', 'ü•¶', 'üçÑ', 'ü•ú', 'üå∞', 'üçû', 'ü•ê', 'ü•ñ',
   'ü•Ø', 'ü•û', 'üßÄ', 'üçñ', 'üçó', 'ü•©', 'ü•ì', 'üçî', 'üçü', 
   'üå≠', 'üç≤', 'üç≥', 'ü•ò', 'üçø', 'üßÇ', 'ü•£', 'ü•ó', 'üçú',
   'üç†', 'üç¢', 'üç£', 'üç§', 'üç•', 'üç°', 'ü•ü', 'ü•†', 'ü•°',
   'ü¶ê', 'ü¶ë', 'üç¶', 'üçß', 'üç®', 'üç©', 'üç™', 'üéÇ', 'üç∞',
   'ü•ß', 'üç´', 'üç¨', 'üç≠', 'üçÆ', 'üçØ', 'üçº', 'ü•§', '‚òï',
   'üç∂', 'üçæ', 'üç∑', 'üç∏', 'üçπ', 'üç∫', 'üçª', 'ü•Ç', 'ü•É',
   'üç¥', 'ü•Ñ', 'üî™', 'üè∫', 'üåç', 'üó∫Ô∏è', 'üèîÔ∏è', '‚õ∞Ô∏è', 'üèïÔ∏è',
   'üåÑ', 'üåÖ', 'üå†', 'üåà', 'üéá', 'üéÜ', 'üåå', 'üåÉ', 'üåâ',
   'üèôÔ∏è', 'üåá', 'üåÜ', 'üè∞', 'üèØ', 'üè†', 'üè°', 'üèòÔ∏è', 'üèöÔ∏è',
   'üè¨', 'üè£', 'üè§', 'üè•', 'üè¶', 'üè®', 'üè™', 'üè´', 'üè©',
   'üèõÔ∏è', '‚õ™', 'üïå', 'üïç', 'üõï', 'üïã', '‚õ©Ô∏è', 'üõ§Ô∏è', 'üõ£Ô∏è',
   'üéë', 'üèûÔ∏è', 'üåÖ', 'üåÑ', 'üå†', 'üåà', 'üéá', 'üéÜ', 'üåå', 
   'üåâ', 'üåÅ', '‚åö', 'üì±', 'üì≤', 'üíª', '‚å®Ô∏è', 'üñ•Ô∏è', 'üñ®Ô∏è', 
   'üñ≤Ô∏è', 'üïπÔ∏è', 'üóúÔ∏è', 'üíΩ', 'üíæ', 'üíø', 'üìÄ', 'üßÆ', 'üé•', 
   'üìΩÔ∏è', 'üé¨', 'üì∫', 'üì∑', 'üì∏', 'üìπ', 'üìº', 'üîç', 'üîé', 
   'üí°', 'üî¶', 'üèÆ', 'üï∞Ô∏è', 'üåÖ', 'üåÑ', 'üå†', 'üåà', 'üéá',
 ];

 useEffect(() => {
  if (enableNotifications) {
    const now = new Date();
    const notificationTime = new Date(
      now.getFullYear(),
      now.getMonth(),
      now.getDate(),
      notificationHour,
      notificationMinute,
      0
    );

    if (notificationTime > now) {
      const timeout = notificationTime - now;
      const timeoutId = setTimeout(() => {
        const notification = new Notification('Task-uri de √Ændeplinit', {
          body: getNotificationMessage(),
        });
      }, timeout);

      return () => clearTimeout(timeoutId);
    }
  }
}, [enableNotifications, tasks, notificationHour, notificationMinute]);

const getNotificationMessage = () => {
  const tomorrow = new Date();
  tomorrow.setDate(tomorrow.getDate() + 1);
  tomorrow.setHours(notificationHour, notificationMinute, 0, 0);

  const allTasks = [
    ...tasks.upcoming,
    ...tasks.overdue,
    ...tasks.completed,
    ...tasks.canceled,
  ];

  const tasksToComplete = allTasks
    .filter(
      (task) =>
        !task.isCompleted &&
        !task.isCanceled &&
        task.dueDate.getDate() === tomorrow.getDate() &&
        task.dueDate.getMonth() === tomorrow.getMonth() &&
        task.dueDate.getFullYear() === tomorrow.getFullYear()
    )
    .map((task) => `- ${task.title} la ${formatDate(task.dueDate)}`)
    .join('\n');

  if (tasksToComplete.trim() === '') {
    return 'Nu a»õi adƒÉugat task-uri.';
  }

  return `Ave»õi urmƒÉtoarele task-uri de √Ændeplinit m√¢ine:\n${tasksToComplete}`;
};

 const handleTaskSubmit = () => {
  if (taskTitle.trim() === '') {
    alert('Introduce»õi un titlu pentru task.');
    return;
  }

  setTasks((prevTasks) => ({
    ...prevTasks,
    upcoming: [
      ...prevTasks.upcoming,
      {
        title: taskTitle,
        id: Date.now(),
        dueDate: new Date(date.setHours(taskHour, 0, 0, 0)),
        emoji: selectedEmoji,
        isCompleted: false,
        isCanceled: false,
      },
    ],
  }));

  setTaskTitle('');
  setShowTable(false);
};

  const filterTasksByDate = (tasks, selectedDate) => {
    const filteredTasks = {};
    Object.keys(tasks).forEach((category) => {
      filteredTasks[category] = tasks[category].filter(
        (task) =>
          task.dueDate.getDate() === selectedDate.getDate() &&
          task.dueDate.getMonth() === selectedDate.getMonth() &&
          task.dueDate.getFullYear() === selectedDate.getFullYear()
      );
    });
    return filteredTasks;
  };

  const onChange = (selectedDate) => {
    setDate(selectedDate);
  };

  const handleAddButtonClick = () => {
    setShowTable(true);
  };

  const handleTaskCompleteToggle = (categoryId, taskId) => {
    setTasks((prevTasks) => {
      const taskToToggle = prevTasks[categoryId].find((task) => task.id === taskId);

      if (!taskToToggle) {
        return prevTasks;
      }

      const updatedTasks = {
        ...prevTasks,
        [categoryId]: prevTasks[categoryId].filter((task) => task.id !== taskId),
        completed: [...prevTasks.completed, { ...taskToToggle, isCompleted: !taskToToggle.isCompleted, isCanceled: false }],
      };

      return updatedTasks;
    });
  };

  const handleTaskCancelToggle = (categoryId, taskId) => {
    setTasks((prevTasks) => {
      const taskToToggle = prevTasks[categoryId].find((task) => task.id === taskId);

      if (!taskToToggle) {
        return prevTasks;
      }

      const updatedTasks = {
        ...prevTasks,
        [categoryId]: prevTasks[categoryId].filter((task) => task.id !== taskId),
        canceled: [...prevTasks.canceled, { ...taskToToggle, isCanceled: !taskToToggle.isCanceled, isCompleted: false }],
      };

      return updatedTasks;
    });
  };

  const handleTaskOverdueToggle = (categoryId, taskId) => {
    setTasks((prevTasks) => {
      const taskToToggle = prevTasks[categoryId].find((task) => task.id === taskId);

      if (!taskToToggle) {
        return prevTasks;
      }

      const updatedTasks = {
        ...prevTasks,
        [categoryId]: prevTasks[categoryId].filter((task) => task.id !== taskId),
        overdue: [...prevTasks.canceled, { ...taskToToggle, isOverdue: !taskToToggle.isOverdue, isCompleted: false }],
      };

      return updatedTasks;
    });
  };

  const handleTaskDelete = (categoryId, taskId) => {
    setTasks((prevTasks) => ({
      ...prevTasks,
      [categoryId]: prevTasks[categoryId].filter((task) => task.id !== taskId),
    }));
  };
 
  const handleSettingsClick = () => {
    setShowSettings(!showSettings);
  };
  

  const formatDate = (date) => {
  const options = { hour: 'numeric', minute: 'numeric', hour12: true };
  return date.toLocaleString('en-US', options);
};

  return (
    <div>
      <h1>Power Task</h1>
      <div>
        <button onClick={handleAddButtonClick}>ADD</button>
      </div>
      <Calendar
  onChange={onChange}
  value={date}
  minDate={new Date()} 
/>
      {showTable && (
        <div>
          <h2>Alege»õi emoticonul, ora »ôi introduce»õi task-ul:</h2>
          <select
            value={selectedEmoji}
            onChange={(e) => setSelectedEmoji(e.target.value)}
          >
            {emojis.map((emoji) => (
              <option key={emoji} value={emoji}>
                {emoji}
              </option>
            ))}
          </select>
          <select
             value={taskHour}
             onChange={(e) => setTaskHour(e.target.value)}
          >
            {[...Array(24).keys()].map((hour) => (
          <option key={hour} value={hour}>
            {hour < 10 ? `0${hour}` : hour}:00
          </option>
            ))}
          </select>
          <input
            type="text"
            placeholder="Introduce»õi titlul task-ului"
            value={taskTitle}
            onChange={(e) => setTaskTitle(e.target.value)}
          />
          <button onClick={handleTaskSubmit}>AdaugƒÉ Task</button>
        </div>
      )}
      <div>
        <table>
          <thead>
            <tr>
              <th>Overdue</th>
              <th>Upcoming</th>
              <th>Completed</th>
              <th>Canceled</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>
                <ul>
                {filterTasksByDate(tasks, date).overdue.map((task) => (
                    <li key={task.id}>
                      {task.title} {task.emoji} {formatDate(task.dueDate)}
                      <button
                        onClick={() => handleTaskDelete('overdue', task.id)}
                      >
                        Delete
                      </button>
                    </li>
                  ))}
                </ul>
              </td>
              <td>
                <ul>
                {filterTasksByDate(tasks, date).upcoming.map((task) => (
                    <li key={task.id}>
                      <input
                        type="checkbox"
                        checked={task.isCompleted}
                        onChange={() => handleTaskCompleteToggle('upcoming', task.id)}
                      />
                      <FaCheck className="check-mark" />
                      <input
                        type="checkbox"
                        checked={task.isOverdue}
                        onChange={() => handleTaskOverdueToggle('upcoming', task.id)}
                      />
                      <FaClock className="clock-mark" />
                      <input
                        type="checkbox"
                        checked={task.isCanceled}
                        onChange={() => handleTaskCancelToggle('upcoming', task.id)}
                      />
                      <FaTimes className="cancel-mark" />
                      {task.title} {task.emoji} {formatDate(task.dueDate)}
                      <button
                        onClick={() => handleTaskDelete('upcoming', task.id)}
                      >
                        Delete
                      </button>
                    </li>
                  ))}
                </ul>
              </td>
              <td>
                <ul>
                  {filterTasksByDate(tasks, date).completed.map((task) => (
                    <li key={task.id}>
                      {task.title} {task.emoji} {formatDate(task.dueDate)}
                      <button
                        onClick={() => handleTaskDelete('completed', task.id)}
                      >
                        Delete
                      </button>
                    </li>
                  ))}
                </ul>
              </td>
              <td>
                <ul>
                  {filterTasksByDate(tasks, date).canceled.map((task) => (
                    <li key={task.id}>
                      {task.title} {task.emoji} {formatDate(task.dueDate)}
                      <button
                        onClick={() => handleTaskDelete('canceled', task.id)}
                      >
                        Delete
                      </button>
                    </li>
                  ))}
                </ul>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
      <button onClick={handleSettingsClick}>SetƒÉri</button>
      {showSettings && (
      <div>
      <div>
        <label>
          Activare notificare
          <input
            type="range"
            min="0"
            max="1"
            step="1"
            value={enableNotifications ? 1 : 0}
            onChange={(e) => {
              setEnableNotifications(e.target.value === '1');
              alert(
                `NotificƒÉrile au fost ${
                  enableNotifications ? 'dezactivate' : 'activate'
                }!`
              );
            }}
          />
          <div>
          <label>
            Ora notificƒÉrii
          <input
            type="number"
            min="0"
            max="23"
            value={notificationHour}
            onChange={(e) => setNotificationHour(Number(e.target.value))}
          />
          </label>
          <label>
            Minutele notificƒÉrii
          <input
            type="number"
            min="0"
            max="59"
            value={notificationMinute}
            onChange={(e) => setNotificationMinute(Number(e.target.value))}
          />
          </label>
          </div>
        </label>
      </div>
      <div>
              <label>
                Activare alarmƒÉ
                <input
                  type="range"
                  min="0"
                  max="1"
                  step="1"
                  value={enableAlarm ? 1 : 0}
                  onChange={(e) => {
                    setEnableAlarm(e.target.value === '1');
                    if (e.target.value === '1') {
                      // RedƒÉ melodia c√¢nd alarmƒÉ este activatƒÉ
                      audio.play().catch((error) => {
                        console.error('Eroare la redarea melodiei:', error);
                      });
                    } else {
                      // Opre»ôte melodia c√¢nd alarmƒÉ este dezactivatƒÉ
                      audio.pause();
                      audio.currentTime = 0;
                    }
                    alert(
                      `Alarma a fost ${
                        enableAlarm ? 'dezactivatƒÉ' : 'activatƒÉ'
                      }!`
                    );
                  }}
                />
              </label>
            </div>
          </div>
      )}
    </div>
  );
};

export default App;